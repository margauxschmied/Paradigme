; Cours 03 : Ordre supérieur

#lang plait

;;;;;;;;;;;;;;;;;;;;;;;;
; Définition des types ;
;;;;;;;;;;;;;;;;;;;;;;;;

; Représentation des expressions 
(define-type Exp
  [numE (n : Number)]
  [idE (s : Symbol)]
  [plusE (l : Exp) (r : Exp)] 
  [multE (l : Exp) (r : Exp)]
  [lamE (par : Symbol) (body : Exp)]
  [appE (fun : Exp) (arg : Exp)]
  [letE (s : Symbol) (rhs : Exp) (body : Exp)]    
  [boolE (b : Boolean)]
  [equE (l : Exp) (r : Exp)]
  [ifE (q : Exp) (f : Exp) (s : Exp)]
  [unletE (s : Symbol) (e : Exp)]
  [delayE (e : Exp)]
  [forceE (t : Exp)]
  )

; Représentation des valeurs
(define-type Value
  [boolV (b : Boolean)]
  [numV (n : Number)]
  [closV (par : Symbol) (body : Exp) (env : Env)]
  [glaconV (e : Exp) (env : Env)])

; Représentation des liaisons
(define-type Binding
  [bind (name : Symbol) (val : Value)])

; Manipulation de l'environnement
(define-type-alias Env (Listof Binding))
(define mt-env empty)
(define extend-env cons)

;;;;;;;;;;;;;;;;;;;;;;
; Analyse syntaxique ;
;;;;;;;;;;;;;;;;;;;;;;

(define (parse [s : S-Exp]) : Exp
  (cond
    [(s-exp-match? `NUMBER s) (numE (s-exp->number s))]
    [(s-exp-match? `true s) (boolE #true)]
    [(s-exp-match? `false s) (boolE #false)]
    [(s-exp-match? `SYMBOL s) (idE (s-exp->symbol s))] 
                                        
    [(s-exp-match? `{+ ANY ANY} s)
     (let ([sl (s-exp->list s)])
       (plusE (parse (second sl)) (parse (third sl))))]
    [(s-exp-match? `{* ANY ANY} s)
     (let ([sl (s-exp->list s)])
       (multE (parse (second sl)) (parse (third sl))))] 
    [(s-exp-match? `{lambda {SYMBOL} ANY} s)
     (let ([sl (s-exp->list s)])
       (lamE (s-exp->symbol (first (s-exp->list (second sl)))) (parse (third sl))))]

    [(s-exp-match? `{delay ANY} s)
     (let ([sl (s-exp->list s)])
       (delayE (parse (second sl))))]
    [(s-exp-match? `{force ANY} s)
     (let ([sl (s-exp->list s)])
       (forceE (parse (second sl))))] 
    
    [(s-exp-match? `{ANY ANY} s)
     (let ([sl (s-exp->list s)])
       (appE (parse (first sl)) (parse (second sl))))]

    
    [(s-exp-match? `{= ANY ANY} s)
     (let ([sl (s-exp->list s)])
       (equE (parse (second sl)) (parse (third sl))))] 
    [(s-exp-match? `{if ANY ANY ANY} s)
     (let ([sl (s-exp->list s)])
       (ifE (parse (second sl)) (parse (third sl)) (parse (fourth sl))))]

    [(s-exp-match? `{unlet SYMBOL ANY} s)
     (let ([sl (s-exp->list s)])
       (unletE (s-exp->symbol (second sl)) (parse (third sl))))]

    
    
    [(s-exp-match? `{let [{SYMBOL ANY}] ANY} s)
     (let ([sl (s-exp->list s)])
       (let ([subst (s-exp->list (first (s-exp->list (second sl))))])
         (letE (s-exp->symbol (first subst))
               (parse (second subst))
               (parse (third sl)))))]
    [else (error 'parse "invalid input")])) 
 
;;;;;;;;;;;;;;;;;;
; Interprétation ;
;;;;;;;;;;;;;;;;;;

; Interpréteur
(define (interp [e : Exp] [env : Env]) : Value
  (type-case Exp e
    [(numE n) (numV n)]
    [(idE s) (lookup s env)]
    [(plusE l r) (num+ (interp l env) (interp r env))]
    [(multE l r) (num* (interp l env) (interp r env))] 
    [(lamE par body) (closV par body env)]

    [(boolE b) (boolV b)]
    [(equE l r) (num= (interp l env) (interp r env))]                      
    [(ifE q f s) (num-if q f s env)]

    [(unletE s e) (interp e (un s env))]

    [(delayE e) (glaconV e env)] 
    [(forceE t) (degel t env)] 
     
    [(appE f arg) 
     (type-case Value (interp f env) 
       [(closV par body c-env)
        (interp body (extend-env (bind par (interp arg env)) c-env))] 
       [else (error 'interp "not a function")])]
    [(letE s rhs body) (interp body (extend-env (bind s (interp rhs env)) env))]))

; Fonctions utilitaires pour l'arithmétique




(define (degel t env)
  (let ([g (interp t env)])
    (if (glaconV? g)
      
        (interp (glaconV-e g) (glaconV-env g))    
        (error 'interp "not a thunk")   
        ))) 

(define (update [l : (Listof ('a * 'b))] [key : 'a] [value : 'b]) : (Listof ('a * 'b))
  (cond
    [(empty? l) (list (pair key value))]
    [(equal? (fst (first  l)) key) (cons (pair key value) (rest l))]
    [else (cons (first l) (update (rest l) key value))]))  

(define (un s env)
  (if (empty? env)
      empty 
      (if (equal? s (bind-name (first env)))
          (rest env) 
          (cons (first env) (un s (rest env)))))) 
           

(define (fold op l1 l2)
  (if (empty? l2)
      l1
      (fold op (op l1 (first l2)) (rest l2))))

(define (num-op [op : (Number Number -> Number)]
                [l : Value] [r : Value]) : Value
  (if (and (numV? l) (numV? r))
      (numV (op (numV-n l) (numV-n r)))
      (error 'interp "not a number")))

(define (num-bool [op : (Number Number -> Boolean)]
                  [l : Value] [r : Value]) : Value
  (if (and (numV? l) (numV? r))
      (boolV (op (numV-n l) (numV-n r)))
      (error 'interp "not a number"))) 

(define (num-if [b : Exp]
                [f : Exp] [s : Exp] [e : Env]) : Value  
  (if (boolV? (interp b e))
      (if (boolV-b (interp b e)) 
          (interp f e) 
          (interp s e))  
      (error 'interp "not a boolean"))) 
      

(define (num+ [l : Value] [r : Value]) : Value
  (num-op + l r))

(define (num* [l : Value] [r : Value]) : Value
  (num-op * l r))

(define (num= [l : Value] [r : Value]) : Value
  (num-bool = l r))

; Recherche d'un identificateur dans l'environnement
(define (lookup [n : Symbol] [env : Env]) : Value
  (cond
    [(empty? env) (error 'lookup "free identifier")]
    [(equal? n (bind-name (first env))) (bind-val (first env))]
    [else (lookup n (rest env))]))

;;;;;;;;;
; Tests ;
;;;;;;;;;

(define (interp-expr [e : S-Exp]) : Value
  (interp (parse e) mt-env))

(test (interp-expr `{let {[f {lambda {x} {+ 1 x}}]} {f 2}})
      (numV 3))

(test (interp-expr `{let {[y 1]} {lambda {x} {+ x y}}})
      (closV 'x (plusE (idE 'x) (idE 'y)) (extend-env (bind 'y (numV 1)) mt-env)))

(test (interp-expr `{let {[y 1]} {{lambda {x} {+ x y}} 2}})
      (numV 3))

(test (interp-expr `{= 1 2}) (boolV #f))
(test/exn (interp-expr `{= true true}) "not a number")
(test (interp-expr `{if true 1 2}) (numV 1))
(test (interp-expr `{if {= {+ 1 3} {* 2 2}} 4 5}) (numV 4))
(test/exn (interp-expr `{if 1 2 3}) "not a boolean")
(test (interp-expr `{if true 1 x}) (numV 1))

(test (interp-expr `{ let {[x 1]} {let {[x 2]} {unlet x x}}}) (numV 1))
(test (interp-expr `{ let {[x 1]}
                       { let {[x 2]}
                          {+ { unlet x x} x} } }) (numV 3))
(test/exn (interp-expr `{ let {[x 1]}
                           { unlet x x} }) "free identifier") 
(test/exn (interp-expr `{ let {[x 1]}
                           { let {[y 2]}
                              {let {[x 3]}
                                {let {[x 4]}
                                  {+ { unlet x {unlet y y}} x}}}}}) "free identifier")
(test (interp-expr `{ let {[y 1]}
                       { let {[y 2]}
                          {let {[x 3]}
                            {let {[x 4]}
                              {+ { unlet x {unlet y y}} x}}}}}) (numV 5))  

(define (ignore x) (void))
(test (ignore (interp-expr `{ delay {+ 1 { lambda {x} x} } })) (void))

(test/exn (interp-expr `{ force { delay {+ 1 { lambda {x} x} } } }) "not a number")
(test (interp-expr `{ let {[t { let {[x 1]} { delay x} }]}
                       { let {[x 2]}
                          { force t} } }) (numV 1))
(test (interp-expr `{force {delay {force {delay {+ 3 1}}}}}) (numV 4))
(test (interp-expr `{force {delay {+ 3 1}}}) (numV 4))
(test (interp-expr `{force {delay { let {[t { let {[x 1]} { delay x} }]}
                       { let {[x 2]}
                          { force t} } }}}) (numV 1)) 

(test/exn (interp-expr `{force {lambda {x} x}}) "not a thunk")
(test (interp-expr `{force {delay {delay 0}}}) (glaconV (numE 0) '()))
(test (interp-expr `{let {[t {let {[x 1]} {delay x}}]}
                        {let {[g {delay {let {[x 2]} {force t}}}]}
                          {force g}}})
        (numV 1))
